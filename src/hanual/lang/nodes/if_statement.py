from __future__ import annotations

from abc import ABC
from typing import TYPE_CHECKING

from hanual.compile.constants.constant import Constant
from hanual.compile.instruction import *
from hanual.compile.label import Label
from hanual.exec.result import Result
from hanual.exec.scope import Scope
from .base_node import BaseNode

if TYPE_CHECKING:
    from .conditions import Condition
    from .block import CodeBlock


class IfStatement(BaseNode, ABC):
    def __init__(self: IfStatement, condition: Condition, block: CodeBlock) -> None:
        self._condition: Condition = condition
        self._block: CodeBlock = block

    @property
    def condition(self) -> Condition:
        return self._condition

    @property
    def block(self) -> CodeBlock:
        return self._block

    def compile(self):
        # The asm generated by this goes
        # CMP [condition]
        # JMP-FALSE IF_label
        # code
        # code
        # IF_label
        # This means that we only jump if the condition is false
        instructions = []

        false_lbl = Label("IF", mangle=True)

        instructions.extend(self._condition.compile())  # compare and put into ac

        instructions.append(JIF(false_lbl))

        return instructions

    def get_constants(self) -> list[Constant]:
        consts = []

        consts.extend(self._condition.get_constants())
        consts.extend(self._block.get_constants())

        return consts

    def get_names(self):
        return [*self._condition.get_names(), *self._block.get_names()]

    def execute(self, scope: Scope) -> Result:
        res = Result()

        val, err = res.inherit_from(self.condition.execute(scope=scope))

        if err:
            return res

        # if the expression evaluates to true
        if val:
            rs = Scope(parent=scope)
            res.inherit_from(self.block.execute(scope=rs))

        # if there was an error in the block, return it
        if res.error:
            return res

        # return if the block was run, aka if the condition was true
        return res.success(val)

    def find_priority(self) -> list[BaseNode]:
        return self._block.find_priority()
